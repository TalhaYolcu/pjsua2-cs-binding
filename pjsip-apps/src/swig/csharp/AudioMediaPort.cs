//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class AudioMediaPort : AudioMedia {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AudioMediaPort(global::System.IntPtr cPtr, bool cMemoryOwn) : base(pjsua2PINVOKE.AudioMediaPort_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AudioMediaPort obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(AudioMediaPort obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pjsua2PINVOKE.delete_AudioMediaPort(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public AudioMediaPort() : this(pjsua2PINVOKE.new_AudioMediaPort(), true) {
    SwigDirectorConnect();
  }

  public void createPort(string name, MediaFormatAudio fmt) {
    pjsua2PINVOKE.AudioMediaPort_createPort(swigCPtr, name, MediaFormatAudio.getCPtr(fmt));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onFrameRequested(MediaFrame frame) {
    if (SwigDerivedClassHasMethod("onFrameRequested", swigMethodTypes0)) pjsua2PINVOKE.AudioMediaPort_onFrameRequestedSwigExplicitAudioMediaPort(swigCPtr, MediaFrame.getCPtr(frame)); else pjsua2PINVOKE.AudioMediaPort_onFrameRequested(swigCPtr, MediaFrame.getCPtr(frame));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onFrameReceived(MediaFrame frame) {
    if (SwigDerivedClassHasMethod("onFrameReceived", swigMethodTypes1)) pjsua2PINVOKE.AudioMediaPort_onFrameReceivedSwigExplicitAudioMediaPort(swigCPtr, MediaFrame.getCPtr(frame)); else pjsua2PINVOKE.AudioMediaPort_onFrameReceived(swigCPtr, MediaFrame.getCPtr(frame));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("onFrameRequested", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateAudioMediaPort_0(SwigDirectorMethodonFrameRequested);
    if (SwigDerivedClassHasMethod("onFrameReceived", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateAudioMediaPort_1(SwigDirectorMethodonFrameReceived);
    pjsua2PINVOKE.AudioMediaPort_director_connect(swigCPtr, swigDelegate0, swigDelegate1);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo[] methodInfos = this.GetType().GetMethods(
        global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance);
    foreach (global::System.Reflection.MethodInfo methodInfo in methodInfos) {
      if (methodInfo.DeclaringType == null)
        continue;

      if (methodInfo.Name != methodName)
        continue;

      var parameters = methodInfo.GetParameters();
      if (parameters.Length != methodTypes.Length)
        continue;

      bool parametersMatch = true;
      for (var i = 0; i < parameters.Length; i++) {
        if (parameters[i].ParameterType != methodTypes[i]) {
          parametersMatch = false;
          break;
        }
      }

      if (!parametersMatch)
        continue;

      if (methodInfo.IsVirtual && (methodInfo.DeclaringType.IsSubclassOf(typeof(AudioMediaPort))) &&
        methodInfo.DeclaringType != methodInfo.GetBaseDefinition().DeclaringType) {
        return true;
      }
    }

    return false;
  }

  private void SwigDirectorMethodonFrameRequested(global::System.IntPtr frame) {
    onFrameRequested(new MediaFrame(frame, false));
  }

  private void SwigDirectorMethodonFrameReceived(global::System.IntPtr frame) {
    onFrameReceived(new MediaFrame(frame, false));
  }

  public delegate void SwigDelegateAudioMediaPort_0(global::System.IntPtr frame);
  public delegate void SwigDelegateAudioMediaPort_1(global::System.IntPtr frame);

  private SwigDelegateAudioMediaPort_0 swigDelegate0;
  private SwigDelegateAudioMediaPort_1 swigDelegate1;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(MediaFrame) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(MediaFrame) };
}
